main: () -> int = {
    std::cout << "original strategy guide: " << readOriginalStategyGuide("input.txt") << std::endl;
    std::cout << "corrected strategy guide: " << readCorrectedStategyGuide("input.txt") << std::endl;
}

moveDelimiter := " ";

readOriginalStategyGuide: (filename: std::string) -> int = {
    file := std::ifstream(filename);
    totalCount := 0;
    if (file.is_open()) {
        moveSet: std::string = "";
        while (std::getline(file, moveSet)) {
            opponentInput := moveSet.substr(0, moveSet.find(moveDelimiter));
            ownInput := moveSet.substr(moveSet.find(moveDelimiter)+1, moveSet.length());
            opponentMove := mapOpponentMove(opponentInput);
            ownMove := mapOwnMove(ownInput);
            totalCount += determineResult(opponentMove, ownMove) + ownMove;
        }
        file.close();
    }
    return totalCount;
}

determineResult: (opponentMove: _, ownMove: _) -> uint = {
    if (opponentMove == ownMove) {
        return 3; // draw
    }

    if (opponentMove == 1 && ownMove == 3) {
        return 0; // lost
    }

    if (opponentMove == 3 && ownMove == 1) {
        return 6; // won
    }

    if (opponentMove < ownMove) {
        return 6; // won
    }

    return 0; // lost
}

mapOpponentMove: (opponentMove: std::string) -> int = {
    if (opponentMove == "A") {
        // should be an enum type
        return 1; // Rock
    }

    if (opponentMove == "B") {
        return 2; // Paper
    }

    if (opponentMove == "C") {
        return 3; // Scissors
    }

    // should probably throw a parsing exception!
    return 0;
}

mapOwnMove: (ownMove: std::string) -> int = {
    if (ownMove == "X") {
        return 1; // Rock
    }

    if (ownMove == "Y") {
        return 2; // Paper
    }

    if (ownMove == "Z") {
        return 3; // Scissors
    }

    // should probably throw a parsing exception!
    return 0;
}

readCorrectedStategyGuide: (filename: std::string) -> int = {
    file := std::ifstream(filename);
    totalCount := 0;
    if (file.is_open()) {
        moveSet: std::string = "";
        while (std::getline(file, moveSet)) {
            opponentInput := moveSet.substr(0, moveSet.find(moveDelimiter));
            outcomeInput := moveSet.substr(moveSet.find(moveDelimiter)+1, moveSet.length());
            opponentMove := mapOpponentMove(opponentInput);
            expectedOutcome := mapExpectedOutcome(outcomeInput);
            totalCount += determineOwnMove(opponentMove, expectedOutcome) + expectedOutcome;
        }
        file.close();
    }
    return totalCount;
}

mapExpectedOutcome: (outcome: std::string) -> int = {
    if (outcome == "X") {
        return 0; // lose
    }

    if (outcome == "Y") {
        return 3; // draw
    }

    if (outcome == "Z") {
        return 6; // win
    }

    // should probably throw a parsing exception!
    return 0;
}

determineOwnMove: (opponentMove: _, expectedOutcome: _) -> int = {
    if (expectedOutcome == 3) {
        return opponentMove;
    }

    if (expectedOutcome == 6) {
        if (opponentMove == 3) { // Scissors
            return 1; // Rock
        } else {
            return opponentMove+1;
        }
    }

    if (opponentMove == 1) { // Rock
        return 3; // Scissors
    } else {
        return opponentMove-1;
    }
}